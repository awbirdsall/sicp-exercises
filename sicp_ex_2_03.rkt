#lang planet neil/sicp
; first implementation
; p1 through p4 define corners in connected order
;(define (make-rectangle p1 p2 p3 p4)
;  (cons (cons (cons p1 p2) p3) p4))
;(define (first-point r)
;  (car (car (car r))))
;(define (second-point r)
;  (cdr (car (car r))))
;(define (third-point r)
;  (cdr (car r)))
;(define (fourth-point r)
;  (cdr r))
;(define (first-length r)
;  (length (first-point r) (second-point r)))
;(define (second-length r)
;  (length (second-point r) (third-point r)))
;(define p1 (make-point 1 2))
;(define p2 (make-point 3 4))
;(define p3 (make-point 6 1))
;(define p4 (make-point 4 (- 1)))
;(define rect (make-rectangle p1 p2 p3 p4)

; second implementation
; s1 through s4 define edges in connected order
(define (make-rectangle2 s1 s2 s3 s4)
  (cons (cons (cons s1 s2) s3) s4))
(define (first-segment r)
  (car (car (car r))))
(define (second-segment r)
  (cdr (car (car r))))
(define (third-segment r)
  (cdr (car r)))
(define (fourth-segment r)
  (cdr r))
(define (first-length r)
  (length (start-segment (first-segment r)) (end-segment (first-segment r))))
(define (second-length r)
  (length (start-segment (second-segment r)) (end-segment (second-segment r))))


; same perimeter and area work for each, since both have first-length and
; second-length accessors
(define (perimeter r)
  (+ (* 2 (first-length r))
     (* 2 (second-length r))))
(define (area r)
  (* (first-length r) (second-length r)))
(define (length p1 p2)
  (sqrt (+ (square (- (x-point p2) (x-point p1)))
           (square (- (y-point p2) (y-point p1))))))
(define (square a)
  (* a a))

(define (make-segment a b)
  (cons a b))
(define (start-segment segment)
  (car segment))
(define (end-segment segment)
  (cdr segment))

(define (make-point x y)
  (cons x y))
(define (x-point p)
  (car p))
(define (y-point p)
  (cdr p))

(define p1 (make-point 1 2))
(define p2 (make-point 3 4))
(define p3 (make-point 6 1))
(define p4 (make-point 4 (- 1)))
(define rect (make-rectangle2 (make-segment p1 p2)
                             (make-segment p2 p3)
                             (make-segment p3 p4)
                             (make-segment p4 p1)))

(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ",")
  (display (y-point p))
  (display ")"))