#lang planet neil/sicp
(define (make-mobile left right)
  (list left right))
(define (make-branch length structure)
  (list length structure))
(define (left-branch mobile)
  (car mobile))
(define (right-branch mobile)
  (car (cdr mobile)))
(define (branch-length branch)
  (car branch))
(define (branch-structure branch)
  (car (cdr branch)))

(define b1 (make-branch 2 4))
(define b2 (make-branch 4 7))
(define m1 (make-mobile b1 b2))
(define m2 (make-mobile (make-branch 1 1) (make-branch 2 (make-mobile (make-branch 3 (make-mobile (make-branch 5 5) (make-branch 6 6))) (make-branch 4 4)))))
(define m3 (make-mobile (make-branch 3 4) (make-branch 4 3)))
(define m4 (make-mobile (make-branch 2 m3) (make-branch 2 m3)))
(define m5 (make-mobile (make-branch 4 m3) (make-branch 2 (make-mobile (make-branch 1 m3)
                                                                       (make-branch 1 m3)))))

(define (super-branch? branch)
  (pair? (branch-structure branch)))
(define (branch-weight branch)
  (if (super-branch? branch)
      (+ (branch-weight (left-branch (branch-structure branch)))
         (branch-weight (right-branch (branch-structure branch))))
      (branch-structure branch)))
(define (total-weight mobile)
  (cond ((null? mobile) 0) ; empty mobile
        ((not (pair? mobile)) mobile) ; leaf
        (else (+ (branch-weight (left-branch mobile))
                 (branch-weight (right-branch mobile))))))
(define (balanced? mobile)
  (define (torque branch)
    (* (branch-length branch) (total-weight (branch-structure branch))))
  (cond ((not (pair? mobile)) #t) ; terminate at leaves
        (else
         (and (= (torque (left-branch mobile)) (torque (right-branch mobile)))
              (balanced? (branch-structure (left-branch mobile)))
              (balanced? (branch-structure (right-branch mobile)))))))
; part (d): effect of changing constructors
(define (make-mobile-cons left right)
  (cons left right))
(define (make-branch-cons length substructure)
  (cons length substructure))
(define (left-branch-cons mobile)
  (car mobile))
(define (right-branch-cons mobile)
  (cdr mobile))
(define (branch-length-cons branch)
  (car branch))
(define (branch-structure-cons branch)
  (cdr branch))
(define b1-cons (make-branch-cons 2 4))
(define b2-cons (make-branch-cons 4 7))
(define m1-cons (make-mobile-cons b1-cons b2-cons))
; because of abstraction, no higher-level procedures need to be rewritten
; if they use the new appropriate selectors