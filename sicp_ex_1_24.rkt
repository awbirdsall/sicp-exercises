#lang planet neil/sicp
(define (fast-prime? n times)
  (cond ((= times 0) true)
        ((fermat-test n) (fast-prime? n (- times 1)))
        (else false)))
(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it (+ 1 (random (- n 1)))))
(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder (square (expmod base (/ exp 2) m))
                    m))
        (else
         (remainder (* base (expmod base (- exp 1) m))
                    m))))
(define (square a)
  (* a a))

(define (search-for-primes n1 n2)
  (if (even? n1)
      (prime-check-range (+ 1 n1) n2 0)
      (prime-check-range n1 n2 0)))
(define (prime-check-range a b primes-counted)
  (cond ((= primes-counted 3) (newline))
        ((> a b) (newline))
        ((timed-prime-test a)
         (prime-check-range (+ a 2)
                            b
                            (+ primes-counted 1)))
        (else
         (prime-check-range(+ a 2)
                           b
                           primes-counted))))
(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))
(define (start-prime-test n start-time)
  (if (fast-prime? n 5)
      (report-prime (- (runtime) start-time))
      #f))
(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time)
  #t)